// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine::games::'Evaluation Engine' is

	@state_num(1);
	@dialect("oal");
	state idle;

	@state_num(2);
	@dialect("oal");
	state evaluating;

	@state_num(3);
	@dialect("oal");
	state 'completing evaluation';

	@event_num(1);
	event 'start evaluation';

	@event_num(2);
	event 'done evaluating';

	state model is

		|                         | 'start evaluation'      | 'done evaluating'       |
		| ----------------------- | ----------------------- | ----------------------- |
		| idle                    | evaluating              | ignore                  |
		| evaluating              | cannot_happen           | 'completing evaluation' |
		| 'completing evaluation' | cannot_happen           | idle                    |

	end state model;

	state idle is
		@noparse
		// if it's still our turn, evaluate again
		select one game related by self->ActiveGame[R1];
		if self.active and game.is_our_turn() then
			generate Engine1:'start evaluation' to self;
		end if;
		@endnoparse
	end state;

	state evaluating is
		@noparse
		// set up the attributes to collect stats
		self.active = true;
		self.pre_evaluation_position_count = self.positions_evaluated;
		self.pre_evaluation_time = TIM::current_clock();
		
		// create first job and put it on the stack
		create object instance new_job of EvaluationJob;
		relate new_job to self across R12;
		select one current_position related by self->ActiveGame[R1]->Position[R3];
		relate current_position to new_job across R9;
		new_job.current_evaluation = current_position.evaluation;
		
		// if the current position is not yet evaluated, start with a depth of 2, otherwise deepen by 1
		if not current_position.evaluated then
			new_job.depth = 2;
		else
			new_job.depth = current_position.evaluation_depth + 1;
		end if;
		
		// start the job
		generate EvaluationJob1:'evaluate' to new_job;
		@endnoparse
	end state;

	state 'completing evaluation' is
		@noparse
		// output stats on the evaluation
		select many pos related by self->Position[R4];
		select one game related by self->ActiveGame[R1];
		select one current_position related by game->Position[R3];
		LOG::LogInfo(message: "Current evaluation depth:  " + STRING::itoa(i: current_position.evaluation_depth));
		LOG::LogInfo(message: "Current position count:    " + STRING::itoa(i: cardinality  pos));
		LOG::LogInfo(message: "New evaluated positions:   " + STRING::itoa(i: self.positions_evaluated - self.pre_evaluation_position_count));
		LOG::LogInfo(message: "Total evaluated positions: " + STRING::itoa(i: self.positions_evaluated));
		LOG::LogInfo(message: "Time to analyze:           " + STRING::itoa(i: (TIM::current_clock() - self.pre_evaluation_time) / 1000) + "ms");
		
		generate Engine2:'done evaluating' to self;
		@endnoparse
	end state;

end;
