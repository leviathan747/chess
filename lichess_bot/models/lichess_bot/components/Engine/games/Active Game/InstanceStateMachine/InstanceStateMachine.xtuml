// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within lichess_bot::components::Engine::games::'Active Game' is

  @state_num(1);
  @dialect("oal");
  state created;

  @state_num(3);
  @dialect("oal");
  state 'game over';

  @state_num(4);
  @dialect("oal");
  state 'our turn';

  @state_num(5);
  @dialect("oal");
  state 'their turn';

  @state_num(6);
  @dialect("oal");
  state 'playing move';

  @state_num(7);
  @dialect("oal");
  state 'claiming victory';

  @state_num(8);
  @dialect("oal");
  state resigning;

  @event_num(1);
  event 'waiting on move';

  @event_num(2);
  event 'game over'(status: in GameStatus);

  @event_num(3);
  event 'play move'(move: in string);

  @event_num(4);
  event 'ready to play';

  @event_num(5);
  event 'claim victory';

  @event_num(6);
  event timeout;

  state model is

    |                    | 'waiting on move'  | 'game over'        | 'play move'        | 'ready to play'    | 'claim victory'    | timeout            |
    | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
    | created            | 'their turn'       | cannot_happen      | cannot_happen      | 'our turn'         | ignore             | ignore             |
    | 'game over'        | ignore             | cannot_happen      | ignore             | ignore             | ignore             | ignore             |
    | 'our turn'         | ignore             | 'game over'        | 'playing move'     | 'our turn'         | 'claiming victory' | ignore             |
    | 'their turn'       | ignore             | 'game over'        | ignore             | 'our turn'         | 'claiming victory' | resigning          |
    | 'playing move'     | 'their turn'       | 'game over'        | cannot_happen      | 'our turn'         | 'claiming victory' | ignore             |
    | 'claiming victory' | ignore             | 'game over'        | ignore             | ignore             | ignore             | ignore             |
    | resigning          | cannot_happen      | 'game over'        | cannot_happen      | cannot_happen      | cannot_happen      | ignore             |

  end state model;

  state 'game over'(status: in GameStatus) is
    @noparse
    LOG::LogInfo(message:"Game: " + self.id + ": Game over!");
    r = TIM::timer_cancel(timer_inst_ref: self.claim_victory_timer);
    r = TIM::timer_cancel(timer_inst_ref: self.resign_timer);
    self.dispose();
    @endnoparse
  end state;

  state 'our turn' is
    @noparse
    r = TIM::timer_cancel(timer_inst_ref: self.resign_timer);

    // handle takeback proposals
    if (self.color == Color::WHITE and self.game_state.btakeback) or
      (self.color == Color::BLACK and self.game_state.wtakeback) then
      self.handle_takeback_proposal();
    end if;

    // handle draw offers
    if (self.color == Color::WHITE and self.game_state.bdraw) or
      (self.color == Color::BLACK and self.game_state.wdraw) then
      self.handle_draw_offer();
    end if;

    // play a move after a certain amount of time, no matter what the status of the engine is
    create event instance e of ActiveGame3:'play move'(move: "") to self;
    max_think_time = Bot::getInteger(name: "max_think_time_ms", default_value: 1000) * 1000;
    self.move_timer = TIM::timer_start(event_inst:e, microseconds: max_think_time);
    @endnoparse
  end state;

  state 'their turn' is
    @noparse
    // set a timer so that we don't wait for our opponent forever
    create event instance e of ActiveGame6:'timeout' to self;
    self.resign_timer = TIM2::timer_start(event_inst: e, seconds: 24 * 3600);  // 24 hours
    @endnoparse
  end state;

  state 'playing move'(move: in string) is
    @noparse
    move = param.move;

    r = TIM::timer_cancel(timer_inst_ref: self.move_timer);

    // if a move is not given try to get the best move from the engine
    if move == "" then

      select one best_move related by self->Position[R3]->Move[R5];
      if not empty best_move then

        move = best_move.lan;
        select one engine related by self->Engine[R1];
        LOG::LogInfo(message: "Playing best line: " + engine.get_best_line());

      else

        // select a random legal move
        LOG::LogInfo(message: "Falling back on random move selection...");
        select one current_position related by self->Position[R3];
        legal_moves = ChessLib::legalMoves(fen: current_position.fen);
        i = 0;  // coerce integer
        i = TIM::current_clock() % legal_moves.length;
        move = legal_moves[i];

      end if;

    end if;

    // play the move
    success = chess::move(game_id: self.id, move: move);
    if success then
      generate ActiveGame1:'waiting on move' to self;
    else
      LOG::LogFailure(message: "Failed to make move.");
      create event instance e of ActiveGame4:'ready to play' to self;
      t = TIM::timer_start(event_inst: e, microseconds: 100000);  // short delay to slow down endless loop possibility
    end if;
    @endnoparse
  end state;

  state 'claiming victory' is
    @noparse
    r = chess::claimVictory(game_id: self.id);
    @endnoparse
  end state;

  state resigning is
    @noparse
    self.resign();
    @endnoparse
  end state;

end;
